<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    * {
        list-style: none;
        text-decoration: none;
        padding: 0;
        margin: 0;
    }

    .virtual-list {
        position: relative;
        overflow: auto;
        width: 300px;
        height: 400px;
        margin: 0 auto;
        border: solid 1px #ccc;
    }

    .virtual-list .virtual-list-phantom {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: -1;
    }

    .virtual-list .virtual-list-content {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
    }

    .virtual-list .virtual-list-content .cell {
        box-sizing: border-box;
        padding: 5px;
        line-height: 30px;
        height: 30px;
        color: #ccc;
        text-align: center;
    }
</style>

<body>
    <h2>数据流-虚拟长列表</h2>
    <div class="virtual-list">
        <div class="virtual-list-phantom"></div>
        <ul class="virtual-list-content">
            <li class="cell"></li>
        </ul>
    </div>
</body>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>
    const virtualList = document.getElementsByClassName('virtual-list')[0];
    const virtualListContent = document.getElementsByClassName('virtual-list-content')[0];
    const virtualListPhantom = document.getElementsByClassName('virtual-list-phantom')[0];
    let data = null;
    let listData = null;
    // 数据初始化
    (() => {
        const instance = axios.create({
            baseURL: "http://127.0.0.1:3000/"
        })

        instance.post('getVirtualListData').then(res => {
            data = res.data.list;
            // 计算数据总高度
            virtualListContentHeight = data.length * 30 + 'px';
            // 设置virtual-list-phantom不可见元素的高度
            virtualListPhantom.style.height = virtualListContentHeight;
            updateVisibleData()
        }).catch(err => {
            if (err) {
                console.log('err', err)
            }
        })
    })()
    // 计算开始/结束下表
    
    //更新可见区域数据
    const updateVisibleData = (virtualListScrollTop) => {
        virtualListScrollTop = virtualListScrollTop || 0;
        console.log('virtualListScrollTop',virtualListScrollTop)
        // 获取可见区域可见列表的数量
        const visibleCount = Math.ceil(virtualList.clientHeight / 30)
        // 获取可见区域起始数据的下标
        const start = Math.floor(virtualListScrollTop / 30)
        // 获取可见区域结束位置下标
        const end = start + visibleCount
        // 计算可视区域对应的数据
        listData = data.slice(start,end);
        let html = ""
        listData.forEach(item => {
            html += `<li class="cell">${item.id}</li>`
        })
        virtualListContent.innerHTML = html;
        virtualListContent.style.webkitTransform = `translate3d(0, ${ start * 30 }px, 0)`;
    }
    virtualList.onscroll = () => {
        let virtualListScrollTop = virtualList.scrollTop;
        updateVisibleData(virtualListScrollTop)
    }
</script>

</html>